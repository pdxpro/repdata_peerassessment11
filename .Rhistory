-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country=="US")
?Comparison
filter(cran, r_version <= "3.0.2", country=="US")
filter(cran, r_version <= "3.0.2", country=="IN")
filter(cran, r_version <= "3.0.2", country=="US" | country == "IN")
filter(cran, country=="US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran, country, desc(r_version), ip_id)
arrange(cran, Country, desc(r_version), ip_id)
arrange(cran, country, desc(r_version), ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
cran3
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
cran
rm("mydf")
cran
?group_by
by_package <- group_by(cran, "package")
by_package <- group_by(cran, package)
by_package
?summarize(mean(size))
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs=0.99)
filter(pack_sum, count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
View()
View(top_counts)
top_counts_sorted <- arrange(top_counts, count)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
arrange(top_unique, desc(unique))
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
?chain
submit()
View(result3)
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
students %>% gather(sex, count, -grade)
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, col=sex_class, into = c("sex", "class"))
submit()
students3
submit()
submit()
?spread
submit()
reset()
submit()
submit()
info()
play()
?spread
students3 %>%
gather(class, grade, class1:class5, na.rm=TRUE)
gather(class, grade, class1:class5, na.rm=TRUE) %>%
spread(test,c(TRUE, FALSE))
spread(test,c(midterm, final))
spread(test,c("midterm, "final"))
spread(test,c("midterm", "final"))
nxt()
submit()
play()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread( test, value) %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
print
nxt()
submit()
extract_numeric("class5")
submit()
submit()
submit()
students4
students4
submit()
submit()
submit()
submit()
submit()
submit()
play()
student_info <- students4 %>%
select(c(id, name, sex)) %>%
print
nxt()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
passed
failed
mutate(passed, status="passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status="failed")
?bind_rows
bind_rows(list(passed, failed))
bind_rows(passed, failed)
sat
submit()
submit()
submit()
submit()
submit()
submit()
submit()
trainx <- read.table(".\\UCI HAR Dataset\\train\\X_train.txt", header= FALSE, stringsAsFactors = FALSE)
trainy <- read.table(".\\UCI HAR Dataset\\train\\y_train.txt", header= FALSE, stringsAsFactors = FALSE)
getwd()
system.time()
system.time( data <- read.table(".\\household_power_consumption.txt", sep=";", header=TRUE, colClasses="character", na.strings="?")
)
plot1 <- function(){
#  dataUrl <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
## Read the data
# download.file(dataUrl, ".\\household_power_consumption.zip", mode="wb")
## Extract compressed file
#  unzip(".\\household_power_consumption.zip")
## Read Data
data <- read.table(".\\household_power_consumption.txt", sep=";", header=TRUE, colClasses="character", na.strings="?")
# Filter the data of interest
#
useflags <- data$Date == "1/2/2007" | data$Date == "2/2/2007"
febData <- data[useflags,]
gap <- febData$Global_active_power
# check if there is any invalid data
invalidData <- is.na(gap)
gapValid <- gap[!invalidData]
## Construct the plot and save it to a PNG file with a width of 480 pixels
## and a height of 480 pixels.
hist(as.numeric(gapValid), main="Global Active Power", xlab="Global Active Power", col="red")
dev.copy(png, file="plot1.png")
dev.off()
}
plot1()
## Examine how household energy usage varies over a 2-day period in February, 2007.
## This function creates a histogram of Global Active Power versus frequency.
## for the dates 1/2/2007 and 2/2/2007
plot1 <- function(){
dataUrl <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
## Read the data
download.file(dataUrl, ".\\household_power_consumption.zip", mode="wb")
## Extract compressed file
unzip(".\\household_power_consumption.zip")
## Read Data
data <- read.table(".\\household_power_consumption.txt", sep=";", header=TRUE, colClasses="character", na.strings="?")
# Filter the data of interest
#
useflags <- data$Date == "1/2/2007" | data$Date == "2/2/2007"
febData <- data[useflags,]
gap <- febData$Global_active_power
# check if there is any invalid data
invalidData <- is.na(gap)
gapValid <- gap[!invalidData]
## Construct the plot and save it to a PNG file with a width of 480 pixels
## and a height of 480 pixels.
hist(as.numeric(gapValid), main="Global Active Power", xlab="Global Active Power (kilowatts)", col="red")
dev.copy(png, file="plot1.png")
dev.off()
}
plot1()
library(lattice)
package.load("lattice")
package.load(lattice)
install.packages("lattice")
install.packages("lattice")
library(lattice)
datasets(airquality)
dataset(airquality)
?dataset
?datasets
library(help="datasets")
library(airquality)
datasets("airquality")
library(datasets)
head(airquality)
?xyplot
xyplot(Ozone, airquality)
xyplot(airquality$Ozone, airquality)
xyplot(airquality$Ozone, airquality$Ozone, airquality)
xyplot( Ozone ~ Wind, data = airquality)
bwplot( Ozone ~ Wind, data = airquality)
histogram(Ozone, data=airquality)
head(airquality)
histogram(Temp, data=airquality)
histogram(Temp, data=airquality)
histogram(airquality$Temp, data=airquality)
stripplot( Ozone ~ Wind, data = airquality)
xyplot( Ozone ~ Wind, data = airquality)
stripplot( Ozone ~ Wind, data = airquality)
dotplot( Ozone ~ Wind, data = airquality)
splom( Ozone ~ Wind, data = airquality)
?splom
levelplot( Ozone ~ Wind, data = airquality)
library(ggplot2)
library(cars)
datasets(cars)
head(cars)
dim(mpg)
summary(mpg)
str(mpg)
qplot(disp, hwy, data=mpg, color=drv)
qplot(displ, hwy, data=mpg, color=drv)
library(nmle)
library(nlme)
library(lattice)
str(nlme)
xyplot(weight ~ Time | Diet, BodyWeight)
help nlme
help lattice
?lattice
?panel.lmline
browseURL("www.microsoft.com")
?browseURL
par(R_BROWSER)
browseURL("www.microsoft.com", browser="Chrome.exe")
browseURL("www.microsoft.com", browser="C:\\Program Files (x86)\\Google\\Chrome\\Application\\Chrome.exe")
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(fileUrl, "DataActivity.zip", mode="wb")
getwd()
list.files()
unzip("DataActivity.zip")
head("activity.csv")
activity <- read.csv("activity.csv")
head(activity)
summary(activity)
str(activity)
head(activity, n= 10, skip=10)
tail(activity)
summary(activity)
activity1 <- activity[steps != NA,]
activity1 <- activity[activity$steps != NA,]
activity1 <- activity[as.integer(activity$steps != NA),]
activity$steps <- as.integer(activity$steps)
activity1 <- activity[activity$steps != NA,]
flag <- activity$steps != NA
summary(flag)
summary(activity1)
rm(activity1)
activity1 <- activity[!is.na(activity$steps),]
head(activity)
activity <- activity[!is.na(activity$steps),]
head(activity)
tail(activity)
summary(activity)
totalSteps <- sum(activity$steps)
getwd()
setwd("C:\\Users\\Ramesh_2\\Desktop\\github\\pdxpro\\RepData_PeerAssessment1")
activity <- read.csv("activity.csv")
activity <- activity[!is.na(activity$steps),]
head(activity)
?factor
activity1$date <- factor(activity$date)
summary(activity1)
str(activity1)
tapply(activity1, activity1$date, sum)
head(activity1)
rm(data)
rm(totalSteps)
lapply(split(activity1, factor(activity1$date), sum)
)
lapply(split(activity1, factor(activity1$date)), sum)
activity1$steps <- as.integer(activity1$steps)
lapply(split(activity1, factor(activity1$date)), sum)
steps <- activity1$steps
head(steps)
dim(steps)
length(steps)
lapply(split(steps, factor(activity1$date)),sum)
sapply(split(steps, factor(activity1$date)),sum)
stepSums <- sapply(split(steps, factor(activity1$date)),sum)
hist(stepSums)
head(stepSums)
dim(stepSums)
str(stepSums)
stepSumstable <- data.table(stepSums)
stepSumstable <- df.table(stepSums)
stepSumstable <- dataframe.table(stepSums)
stepSumsTable <- as.table(stepSums)
dim(stepSumsTable)
str(stepSumsTable)
stepSumsTable$date <- attr(*,"dimnames")
stepSumsTable$date <- attr(stepSumsTable,"dimnames")
attr(stepSumsTable, "dimnames")
attr(*, "dimnames")
attr(stepSumsTable, "dimnames")
stepSumsTable$date <- split(activity1$date, factor(activity1$date))
stepSumsTable
dim(stepSumsTable)
stepSums <- tapply(split(steps, factor(activity1$date)),sum)
stepSums <- tapply(split(activity1, factor(activity1$date)),sum)
stepSums <- sapply(split(steps, factor(activity$date)),sum)
aggdata <-aggregate(activity$steps, by=list(activity$date), FUN=sum, na.rm=TRUE)
head(aggdata)
hist(aggdata)
aggdata$x <- as.integer(aggdata$x)
hist(aggdata)
hist(aggdata$x)
stepsum <- aggregate(activity$steps, by=list(activity$date), FUN=sum, na.rm=TRUE)
head(stepsum)
stepsum <- colnames("date", steps)
stepsum <- colnames("date", "steps")
head(stepsum)
stepsum <- aggregate(activity$steps, by=list(activity$date), FUN=sum, na.rm=TRUE)
head(stepsum)
names(stepsum)
names(stepsum) <- c("date", "steps")
names(stepsum)
head(stepsum)
?hist
plot(date,as.numeric(stepsum$steps))
plot(date,as.numeric(stepsum$steps), col="black", type='h', xlab="date", ylab="steps")
plot(stepsum$date,as.numeric(stepsum$steps), col="black", type='h', xlab="date", ylab="steps")
tail(stepsum)
qplot(steps, data = stepsum, geom="histogram" )
libgrary(ggplot2)
library(ggplot2)
qplot(steps, data = stepsum, geom="histogram" )
qplot(stepsum$date, data = stepsum, geom="histogram" )
plot(stepsum$date,as.numeric(stepsum$steps), col="black", type='s', xlab="date", ylab="steps")
plot(stepsum$date,as.numeric(stepsum$steps), col="black", type="h", xlab="date", ylab="steps")
hist(stepsum)
hist(stepsum$steps)
hist(stepsum$steps, breaks=53)
hist(stepsum$steps, breaks=54)
hist(stepsum$steps, breaks=53)
hist(stepsum$steps, breaks=53, xlab="Sum of Steps")
hist(stepsum$steps, breaks=53, xlab="Sum of Steps", col="red")
stepsum <- aggregate(activity$steps, by=list(activity$date), FUN=sum, na.rm=TRUE)
names(stepsum) <- c("date", "steps")
hist(stepsum$steps, breaks=53, xlab="Sum of Steps", col="red",  main="Histogram of Steps taken each day")
# Calculate the total number of steps for each day
aggregate(activity$steps, by=list(activity$date), FUN=mean, na.rm=TRUE)
# Calculate the total number of steps for each day
stepmean <- aggregate(activity$steps, by=list(activity$date), FUN=mean, na.rm=TRUE)
names(stepmean)
names(stepmean) <- c("date", "mean")
stepmean <- aggregate(activity$steps, by=list(activity$date), FUN=median, na.rm=TRUE)
names(stepmedian) <- c("date", "median")
# Calculate the total number of steps for each day
stepmean <- aggregate(activity$steps, by=list(activity$date), FUN=mean, na.rm=TRUE)
stepmedian <- aggregate(activity$steps, by=list(activity$date), FUN=median, na.rm=TRUE)
names(stepmedian) <- c("date", "median")
merge(stepmean, stepmedian, by = intersect("date"))
merge(stepmean, stepmedian, by = intersect("date", "date"))
merge(stepmean, stepmedian, by.x="date", by.y="date"
)
merge(stepmean, stepmedian, by.x=stepmean$date, by.y=stepmedian$date
)
merge(stepmean, stepmedian, intersect(stepmean$date, stepmedian$date))
merge(stepmean, stepmedian, intersect(stepmean$date, stepmedian$date), by.x="date")
merge(stepmean, stepmedian, intersect(stepmean$date, stepmedian$date), by.x=stepmedian$date)
merge(stepmean, stepmedian, intersect(stepmean$date, stepmedian$date), by.x=stepmean$date)
merge(stepmean, stepmedian, by.x=stepmean$date, by.y = stepmedian$date)
merge(stepmean, stepmedian, by.x=stepmean$date, by.y = stepmedian$date, all=FALSE)
merge(stepmean, stepmedian, by.x=stepmean$date, all=FALSE)
merge(stepmean, stepmedian, intersect("date", "date"), by.x=stepmean$date, all=FALSE)
merge(stepmean, stepmedian, intersect("date"), by.x=stepmean$date, all=FALSE)
merge(stepmean, stepmedian, intersect("date","date"), by.x=stepmean$date, all=FALSE)
cbind(stepmean, stepmedian)
stepmean <- aggregate(activity$steps, by=list(activity$date), FUN=mean, na.rm=TRUE)
names(stepmean) <- c("date", "mean")
# Calculate the median of number of steps for each day
stepmedian <- aggregate(activity$steps, by=list(activity$date), FUN=median, na.rm=TRUE)
names(stepmedian) <- c("date", "median")
cbind(stepmean,stepmedian)
cbind(stepmean,stepmedian$median)
stepmeanandmedian <- cbind(stepmean,stepmedian$median)
names(stepmeanandmedian) <- c("date", "mean", "median")
head(stepmeanandmedian)
stepmeanandmedian
with(activity, { plot(x, y, col="black", type="l", )})
with(activity, { plot("date", "steps" , col="black", type="l", )})
with(activity, { plot("date", "steps" , col="black", type="l", na.rm=TRUE)})
str(activity$date)
is.na(activity$date)
summary(is.na(activity$date)
)
summary(is.na(activity$steps))
with(activity, { plot("date", "steps" , col="black", type="l")})
activity$date <- as.POSIXct(activity$date)
with(activity, { plot("date", "steps" , col="black", type="l")})
with(activity, { plot("date", "steps" , col="black", type="l")})
with(activity, { plot("date", "steps" , col="black", type="l")})
activity$date <- strptime(activity$date, "%Y-%m-%d")
with(activity, { plot("date", "steps" , col="black", type="l")})
min(activity$date)
plot.window(xlim=c(min(activity$date), max(activity$date))
)
plot.window(xlim=c(min(activity$date), max(activity$date)), ylim= c(min(activity$steps), max(activity$steps)))
with(activity, { plot("date", "steps" , col="black", type="l")})
with(activity, { plot("date", "steps" , col="black", type="l")})
?xyplot
plot(activity$date,activity$steps, type='l', xlab="", ylab="y")
+geom_smooth("lm")
plot(activity$date,activity$steps, type='l', xlab="", ylab="y")
head(activity)
datetime <- paste(activity$date, interval
)
datetime <- paste(activity$date, activity$interval)
datetime <- strptime(datetime, "%Y-%m-%d %H:%M")
head(datetime)
tail(datetime)
head(activit$interval)
head(activity$interval)
head(activity$interval, n= 100)
tail(activity$interval)
datetime <- paste(activity$date, interval)
datetime <- paste(activity$date, activity$interval)
head(datetime)
datetime <- strptime(datetime, "%Y-%m-%d %H%M")
head(datetime)
taile(datetime)
tail(datetime)
head(activity)
interval <- format("%04d", activity$interval)
head(interval)
interval
activity$interval <- format(activity$interval, width=4, flag="0")
head(activity)
activity$interval <- format(activity$interval, digits=4, flag="0")
head(activity)
num <- 5
format(num, digits=4, flag="0")
format(num, digits=4, width = 4, flag="0")
format("%04d,num)
format("%04d",num)
format("%04d",num)
formatC("%04d", num)
num <- 5
formatC("%04d", num)
sprintf("%04d", 5)
activity$interval <- lapply(activity$interval, sprintf, "%04d")
head(activity)
activity$interval <- sprintf("%04d", activity$interval)
activity$interval <- sapply(activity$interval, sprintf, "%04d")
head(activity)
interval <- activity$interval
head(interval)
interval <- sapply(interval, sprintf, "%04d")
head(interval)
tapply(interval, sprintf, "%04d")
interval <- lapply(interval, sprintf, "%04d")
head(interval)
plot(activity$date,activity$steps, type='l', xlab="", ylab="y")
plot(activity$interval,activity$steps, type='l', xlab="", ylab="y")
step5min <- aggregate(activity$steps, by=list(activity$interval), FUN=sum, na.rm=TRUE)
summary(step5min)
step5min
names(step5min) <- c("interval",  "steps")
head(step5min)
intervalmax <- step5min$interval[max(step5min$steps)]
intervalmax <- step5min[max(step5min$steps),]
intervalmax
?select
max(step5min$steps)
step5min[order(step5min$steps),]
step5minordered <- step5min[order(step5min$steps),]
step5minordered[53]$interval
step5minordered[53, "interval"]
length(step5minordered)
dim(step5minordered)
step5minordered[288, "interval"]
rowcount(step5minordered)
?nrows
?numrows
nrow(step5minordered)
activitywithNA <- read.csv("activity.csv")
nrow[activitywithNA] - nrow[activity]
nrow[activitywithNA,] - nrow[activity,]
nrow[activitywithNA$steps] - nrow[activity$steps]
nrow(activitywithNA) - nrow(activity)
